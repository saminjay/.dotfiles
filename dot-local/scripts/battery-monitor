#!/bin/bash

function usage() {
    echo ""
    echo "Usage: ${0##*/} [--min <int>] [--max <int>] [-k | --kill]"
    echo ""
    echo "--min=<int>           minimum battery percentage,"
    echo "                      should be greater than 0 and less than max"
    echo "                      defaults to 60"
    echo ""
    echo "--max=<int>           maximum battery percentage,"
    echo "                      should be less than 100 and greater than min"
    echo "                      defaults to 70"
    echo ""
    echo "--quiet, -q           don't show notifications"
    echo ""
    echo "-k, --kill            kill all the instances of this script and exit"
    echo "                      Note: a successfull run will also kill all the previous instances"
    echo "                            should not be matched with other options"
    echo ""
    echo "-h, -?, --help        show this message than exit"
}

function kill_prev() {
    # pgrep returns pid
    # $0 returns current script name
    # $$ contains current pid (grep ignore so it doesn't suicide)
    kill $(pgrep -f $0 | grep -v $$) >/dev/null 2>&1
}

function validate_input() {
    while :;
    do
        case $1 in
            -h|-\?|--help)
                usage
                exit 0
                ;;
            -k|--kill)
                kill_prev
                echo "All processes killed"
                exit 0
                ;;
            --min=?*)
                min=${1#*=}
                ;;
            --max=?*)
                max=${1#*=}
                ;;
            --quiet|-q)
                should_notify=false
                ;;
            ?*)
                echo "ERROR: $1 is in an invalid option. See usage"
                usage
                exit 1
                ;;
            *)
                shift
                break
        esac
        shift
    done

    if [[ $min -ge $max ]]; then
        echo "ERROR: min cannot be greater than or equal to max"
        usage
        exit 1
    elif [[ $min -le 0 ]]; then
        echo "ERROR: min cannot be less than or equal to 0"
        usage
        exit 1
    elif [[ $max -ge 100 ]]; then
        echo "ERROR: max cannot be greater than or equal to 100"
        usage
        exit 1
    fi
}

function notify() {
    notify-send -w --app-name="Battery Monitor" --urgency="critical" "$1" "$2" &
}

function get_plugged() {
    local adapter_path=$(upower -e | grep line_power)
    upower -i $adapter_path | grep -A2 'line-power' | grep online | awk '{ print $2 }'
}

function get_percentage() {
    local bat_path=$(upower -e | grep battery_BAT)
    upower -i $bat_path | grep 'percentage:' | awk '{ print $2 }' | sed 's/%//'
}

function monitor() {
    while true
    do
        sleep 10s
        local bat_percent=$(get_percentage)

        if [[ $(get_plugged) == "yes" ]]; then
            if [[ $bat_percent -ge $max ]]; then
                $should_notify && notify "Battery reached $max%" "Unplug the power cable." >/dev/null 2>&1
                ~/.local/python/ty-plug/ty-plug -s off
                while [ $(get_plugged) == "yes" ]; do :; done
                $should_notify && kill -2 $!
            fi
        else
            if [[ $bat_percent -le $min ]]; then
                $should_notify && notify "Battery is below $min%" "Plug in the power cable." >/dev/null 2>&1
                ~/.local/python/ty-plug/ty-plug -s on
                while [ $(get_plugged) == "no" ]; do :; done
                $should_notify && kill -2 $!
            fi
        fi
    done
}

function main() {
    local min=60
    local max=70
    local should_notify=true

    validate_input $@
    kill_prev
    monitor & disown >/dev/null 2>&1
}

main $@

