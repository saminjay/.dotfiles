#!/usr/bin/env bash

function kill_prev() {
    # $$ contains current pid (grep ignore so it doesn't suicide)
    # TODO: Find a better way, this also returns the pid of the subshell
    local processes
    readarray -t processes < <(pgrep -f "$0" | grep -v "$$")
    kill "${processes[@]}" >/dev/null 2>&1
}

function validate_input() {
    local opts
    local fl

    cd "${wallpapers_dir}" || exit
    # shellcheck disable=SC2012
    readarray -t opts < <(find . -mindepth 1 -maxdepth 1 -type d |
        sed "s/\.\///" |
        grep -v ".git")
    fl=0

    for i in "${opts[@]}"; do
        if [ "$1" = "$i" ]; then
            fl=1
            group=$1
        fi
    done

    if [ $fl -eq 0 ]; then
        echo "$1 not found"
        echo "Available params:"
        echo "${opts[@]}"
        exit 1
    fi
}

function change_hyprpaper() {
    eval hyprctl hyprpaper unload all
    eval hyprctl hyprpaper preload "$1"
    eval hyprctl hyprpaper wallpaper ",$1"
}

function change_gnome_wallpaper() {
    eval gsettings set org.gnome.desktop.background picture-uri-dark "$1"
}

function change_wallpaper() {
    local wallpapers
    local len
    local idx

    readarray -t wallpapers < <(find "$wallpapers_dir/$group" -mindepth 1 -maxdepth 1)

    idx=0
    len=${#wallpapers[@]}

    while true; do
        sleep 1m
        # randomly choose a wallpaper
        idx=$((RANDOM % len))

        # actually setting the wallpaper
        # change_gnome_wallpaper "$ptf/${wallpapers[idx]}"
        change_hyprpaper "${wallpapers[idx]}"
    done
}

function main() {
    local wallpapers_dir
    local group
    wallpapers_dir="${HOME}/.wallpapers"
    validate_input "$@"
    kill_prev
    change_wallpaper >/dev/null 2>&1 &
    disown
}

main "$@"
